--- a/include/turtle/mock.hpp	2018-01-31 18:43:05.201459086 +0100
+++ b/include/turtle/mock.hpp	2018-02-01 10:58:22.554906024 +0100
@@ -71,6 +71,23 @@
             BOOST_PP_STRINGIZE(t) ); \
         return t##_mock_; \
     }
+#define MOCK_METHOD_DECLARE_HELPER(S, t, tpn) \
+    mutable mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) > t##_mock_; \
+    mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) >& t##_mock( \
+        const mock::detail::context&, \
+        boost::unit_test::const_string instance ) const;
+#define MOCK_METHOD_DEFINE_HELPER(C, S, t, tpn) \
+    mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) >& C::t##_mock( \
+        const mock::detail::context&, \
+        boost::unit_test::const_string instance ) const \
+    { \
+        mock::detail::configure( *this, t##_mock_, \
+            instance.substr( 0, instance.rfind( BOOST_PP_STRINGIZE(t) ) ), \
+            MOCK_TYPE_NAME(*this), \
+            BOOST_PP_STRINGIZE(t) ); \
+        return t##_mock_; \
+    }
+

 #define MOCK_PARAM(z, n, d) \
     BOOST_PP_COMMA_IF(n) d, n >::type p##n
@@ -91,39 +108,117 @@
         return MOCK_ANONYMOUS_HELPER(t)( \
             BOOST_PP_ENUM_PARAMS(n, p) ); \
     }
+#define MOCK_METHOD_DECLARE_AUX(M, n, S, t, c, tpn) \
+    MOCK_DECL(M, n, S, c, tpn);
+#define MOCK_METHOD_DEFINE_AUX(C, M, n, S, t, c, tpn) \
+    MOCK_DECL(C::M, n, S, c, tpn) \
+    { \
+        BOOST_MPL_ASSERT_RELATION( n, ==, \
+            boost::function_types::function_arity< \
+                MOCK_FUNCTION_TYPE((S), tpn) >::value ); \
+        return MOCK_ANONYMOUS_HELPER(t)( \
+            BOOST_PP_ENUM_PARAMS(n, p) ); \
+    }

 #define MOCK_METHOD_EXT(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t,,) \
     MOCK_METHOD_AUX(M, n, S, t, const,) \
     MOCK_METHOD_HELPER(S, t,)
+#define MOCK_METHOD_DECLARE_EXT(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t,,) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t, const,) \
+    MOCK_METHOD_DECLARE_HELPER(S, t,)
+#define MOCK_METHOD_DEFINE_EXT(C, M, n, S, t) \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t,,) \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t, const,) \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t,)
 #define MOCK_CONST_METHOD_EXT(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t, const,) \
     MOCK_METHOD_HELPER(S, t,)
+#define MOCK_CONST_METHOD_DECLARE_EXT(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t, const,) \
+    MOCK_METHOD_DECLARE_HELPER(S, t,)
+#define MOCK_CONST_METHOD_DEFINE_EXT(C, M, n, S, t) \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t, const,) \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t,)
 #define MOCK_NON_CONST_METHOD_EXT(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t,,) \
     MOCK_METHOD_HELPER(S, t,)
+#define MOCK_NON_CONST_METHOD_DECLARE_EXT(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t,,) \
+    MOCK_METHOD_DECLARE_HELPER(S, t,)
+#define MOCK_NON_CONST_METHOD_DEFINE_EXT(C, M, n, S, t) \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t,,) \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t,)
 
 #define MOCK_METHOD_EXT_TPL(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t,, typename) \
     MOCK_METHOD_AUX(M, n, S, t, const, typename) \
     MOCK_METHOD_HELPER(S, t, typename)
+#define MOCK_METHOD_DECLARE_EXT_TPL(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t,, typename) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t, const, typename) \
+    MOCK_METHOD_DECLARE_HELPER(S, t, typename)
+#define MOCK_METHOD_DEFINE_EXT_TPL(T, C, M, n, S, t) \
+    template < T > \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t,, typename) \
+    template < T > \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t, const, typename) \
+    template < T > \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t, typename)
 #define MOCK_CONST_METHOD_EXT_TPL(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t, const, typename) \
     MOCK_METHOD_HELPER(S, t, typename)
+#define MOCK_CONST_METHOD_DECLARE_EXT_TPL(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t, const, typename) \
+    MOCK_METHOD_DECLARE_HELPER(S, t, typename)
+#define MOCK_CONST_METHOD_DEFINE_EXT_TPL(T, C, M, n, S, t) \
+    template< T > \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t, const, typename) \
+    template< T > \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t, typename)
 #define MOCK_NON_CONST_METHOD_EXT_TPL(M, n, S, t) \
     MOCK_METHOD_AUX(M, n, S, t,, typename) \
     MOCK_METHOD_HELPER(S, t, typename)
+#define MOCK_NON_CONST_METHOD_DECLARE_EXT_TPL(M, n, S, t) \
+    MOCK_METHOD_DECLARE_AUX(M, n, S, t,, typename) \
+    MOCK_METHOD_DECLARE_HELPER(S, t, typename)
+#define MOCK_NON_CONST_METHOD_DEFINE_EXT_TPL(T, C, M, n, S, t) \
+    template < T > \
+    MOCK_METHOD_DEFINE_AUX(C, M, n, S, t,, typename) \
+    template < T > \
+    MOCK_METHOD_DEFINE_HELPER(C, S, t, typename)
 
 #define MOCK_CONVERSION_OPERATOR(M, T, t) \
     M T() const { return MOCK_ANONYMOUS_HELPER(t)(); } \
     M T() { return MOCK_ANONYMOUS_HELPER(t)(); } \
     MOCK_METHOD_HELPER(T(), t,)
+#define MOCK_CONVERSION_OPERATOR_DECLARE(M, T, t) \
+    M T() const; \
+    M T(); \
+    MOCK_METHOD_DECLARE_HELPER(T(), t,)
+#define MOCK_CONVERSION_OPERATOR_DEFINE(C, M, T, t) \
+    C::M T() const { return MOCK_ANONYMOUS_HELPER(t)(); } \
+    C::M T() { return MOCK_ANONYMOUS_HELPER(t)(); } \
+    MOCK_METHOD_DEFINE_HELPER(C, T(), t,)
 #define MOCK_CONST_CONVERSION_OPERATOR(M, T, t) \
     M T() const { return MOCK_ANONYMOUS_HELPER(t)(); } \
     MOCK_METHOD_HELPER(T(), t,)
+#define MOCK_CONST_CONVERSION_OPERATOR_DECLARE(M, T, t) \
+    M T() const; \
+    MOCK_METHOD_DECLARE_HELPER(T(), t,)
+#define MOCK_CONST_CONVERSION_OPERATOR_DEFINE(C, M, T, t) \
+    C::M T() const { return MOCK_ANONYMOUS_HELPER(t)(); } \
+    MOCK_METHOD_DEFINE_HELPER(C, T(), t,)
 #define MOCK_NON_CONST_CONVERSION_OPERATOR(M, T, t) \
     M T() { return MOCK_ANONYMOUS_HELPER(t)(); } \
     MOCK_METHOD_HELPER(T(), t,)
+#define MOCK_NON_CONST_CONVERSION_OPERATOR_DECLARE(M, T, t) \
+    M T(); \
+    MOCK_METHOD_DECLARE_HELPER(T(), t,)
+#define MOCK_NON_CONST_CONVERSION_OPERATOR_DEFINE(C, M, T, t) \
+    C::M T() { return MOCK_ANONYMOUS_HELPER(t)(); } \
+    MOCK_METHOD_DEFINE_HELPER(C, T(), t,)

 #define MOCK_CONVERSION_OPERATOR_TPL(M, T, t) \
     M T() const { return MOCK_ANONYMOUS_HELPER(t)(); } \
@@ -144,6 +239,18 @@
         static mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) > f; \
         return f( context, instance ); \
     }
+#define MOCK_FUNCTION_DECLARE_HELPER(S, t, s, tpn) \
+    s mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) >& t##_mock( \
+        mock::detail::context& context, \
+        boost::unit_test::const_string instance );
+#define MOCK_FUNCTION_DEFINE_HELPER(S, t, s, tpn) \
+    s mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) >& t##_mock( \
+        mock::detail::context& context, \
+        boost::unit_test::const_string instance ) \
+    { \
+        static mock::detail::function< MOCK_FUNCTION_TYPE((S), tpn) > f; \
+        return f( context, instance ); \
+    }

 #define MOCK_CONSTRUCTOR_AUX(T, n, A, t, tpn) \
     T( MOCK_PARAMS(n, void A, tpn) ) \
@@ -151,15 +258,34 @@
         MOCK_HELPER(t)( BOOST_PP_ENUM_PARAMS(n, p) ); \
     } \
     MOCK_FUNCTION_HELPER(void A, t, static, tpn)
+#define MOCK_CONSTRUCTOR_DECLARE_AUX(T, n, A, t, tpn) \
+    T( MOCK_PARAMS(n, void A, tpn) ); \
+    MOCK_FUNCTION_DECLARE_HELPER(void A, t, static, tpn)
+#define MOCK_CONSTRUCTOR_DEFINE_AUX(T, n, A, t, tpn) \
+    T::T( MOCK_PARAMS(n, void A, tpn) ) \
+    { \
+        MOCK_HELPER(t)( BOOST_PP_ENUM_PARAMS(n, p) ); \
+    } \
+    MOCK_FUNCTION_DEFINE_HELPER(void A, T::t, , tpn)

 #define MOCK_CONSTRUCTOR(T, n, A, t) \
     MOCK_CONSTRUCTOR_AUX(T, n, A, t,)
+#define MOCK_CONSTRUCTOR_DECLARE(T, n, A, t) \
+    MOCK_CONSTRUCTOR_DECLARE_AUX(T, n, A, t,)
+#define MOCK_CONSTRUCTOR_DEFINE(T, n, A, t) \
+    MOCK_CONSTRUCTOR_DEFINE_AUX(T, n, A, t,)
 #define MOCK_CONSTRUCTOR_TPL(T, n, A, t) \
     MOCK_CONSTRUCTOR_AUX(T, n, A, t, typename)

 #define MOCK_DESTRUCTOR(T, t) \
     T() { try { MOCK_ANONYMOUS_HELPER(t)(); } catch( ... ) {} } \
     MOCK_METHOD_HELPER(void(), t,)
+#define MOCK_DESTRUCTOR_DECLARE(T, t) \
+    T(); \
+    MOCK_METHOD_DECLARE_HELPER(void(), t,)
+#define MOCK_DESTRUCTOR_DEFINE(C, T, t) \
+    C::T() { try { MOCK_ANONYMOUS_HELPER(t)(); } catch( ... ) {} } \
+    MOCK_METHOD_DEFINE_HELPER(C, void(), t,)

 #define MOCK_FUNCTION_AUX(F, n, S, t, s, tpn) \
     MOCK_FUNCTION_HELPER(S, t, s, tpn) \
@@ -170,6 +296,18 @@
                 MOCK_FUNCTION_TYPE((S), tpn) >::value ); \
         return MOCK_HELPER(t)( BOOST_PP_ENUM_PARAMS(n, p) ); \
     }
+#define MOCK_FUNCTION_DECLARE_AUX(F, n, S, t, s, tpn) \
+    MOCK_FUNCTION_DECLARE_HELPER(S, t, s, tpn) \
+    s MOCK_DECL(F, n, S,,tpn);
+#define MOCK_FUNCTION_DEFINE_AUX(F, n, S, t, s, tpn) \
+    MOCK_FUNCTION_DEFINE_HELPER(S, t, s, tpn) \
+    s MOCK_DECL(F, n, S,,tpn) \
+    { \
+        BOOST_MPL_ASSERT_RELATION( n, ==, \
+            boost::function_types::function_arity< \
+                MOCK_FUNCTION_TYPE((S), tpn) >::value ); \
+        return MOCK_HELPER(t)( BOOST_PP_ENUM_PARAMS(n, p) ); \
+    }

 #ifdef MOCK_VARIADIC_MACROS

@@ -180,44 +318,119 @@
 #define MOCK_METHOD_SIGNATURE(M, n, S, t) \
     typedef MOCK_FUNCTION_TYPE((S),) BOOST_PP_CAT(t,_sig_type); \
     MOCK_METHOD_EXT(M, n, BOOST_PP_CAT(t,_sig_type), t)
+#define MOCK_METHOD_SIGNATURE_DECLARE(M, n, S, t) \
+    typedef MOCK_FUNCTION_TYPE((S),) BOOST_PP_CAT(t,_sig_type); \
+    MOCK_METHOD_DECLARE_EXT(M, n, BOOST_PP_CAT(t,_sig_type), t)
 #define MOCK_METHOD(M, ...) \
     MOCK_METHOD_SIGNATURE(M, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__ ), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, MOCK_SIGNATURE(M)), \
         MOCK_VARIADIC_ELEM_2(__VA_ARGS__, M, M))
+#define MOCK_METHOD_DECLARE(M, ...) \
+    MOCK_METHOD_SIGNATURE_DECLARE(M, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__ ), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, MOCK_SIGNATURE(M)), \
+        MOCK_VARIADIC_ELEM_2(__VA_ARGS__, M, M))
+#define MOCK_METHOD_DEFINE(C, M, ...) \
+    MOCK_METHOD_DEFINE_EXT(C, M, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__ ), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, MOCK_SIGNATURE(M)), \
+        MOCK_VARIADIC_ELEM_2(__VA_ARGS__, M, M))
 #define MOCK_CONST_METHOD(M, n, ...) \
     MOCK_CONST_METHOD_EXT(M, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_CONST_METHOD_DECLARE(M, n, ...) \
+    MOCK_CONST_METHOD_DECLARE_EXT(M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_CONST_METHOD_DEFINE(C, M, n, ...) \
+    MOCK_CONST_METHOD_DEFINE_EXT(C, M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
 #define MOCK_NON_CONST_METHOD(M, n, ...) \
     MOCK_NON_CONST_METHOD_EXT(M, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_NON_CONST_METHOD_DECLARE(M, n, ...) \
+    MOCK_NON_CONST_METHOD_DECLARE_EXT(M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_NON_CONST_METHOD_DEFINE(C, M, n, ...) \
+    MOCK_NON_CONST_METHOD_DEFINE_EXT(C, M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+
 
 #define MOCK_METHOD_TPL(M, n, ...) \
     MOCK_METHOD_EXT_TPL(M, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_METHOD_DECLARE_TPL(M, n, ...) \
+    MOCK_METHOD_EXT_TPL(M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_METHOD_DEFINE_TPL(T, C, M, ...) \
+    MOCK_METHOD_DEFINE_EXT_TPL(T, C, M, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__ ), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, MOCK_SIGNATURE(M)), \
+        MOCK_VARIADIC_ELEM_2(__VA_ARGS__, M, M))
 #define MOCK_CONST_METHOD_TPL(M, n, ...) \
     MOCK_CONST_METHOD_EXT_TPL(M, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_CONST_METHOD_DECLARE_TPL(M, n, ...) \
+    MOCK_CONST_METHOD_DECLARE_EXT_TPL(M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_CONST_METHOD_DEFINE_TPL(T, C, M, n, ...) \
+    MOCK_CONST_METHOD_DEFINE_EXT_TPL(T, C, M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
 #define MOCK_NON_CONST_METHOD_TPL(M, n, ...) \
     MOCK_NON_CONST_METHOD_EXT_TPL(M, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_NON_CONST_METHOD_DECLARE_TPL(M, n, ...) \
+    MOCK_NON_CONST_METHOD_DECLARE_EXT_TPL(M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
+#define MOCK_NON_CONST_METHOD_DEFINE_TPL(T, C, M, n, ...) \
+    MOCK_NON_CONST_METHOD_DEFINE_EXT_TPL(T,  C, M, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, M))
 
 #define MOCK_FUNCTION(F, n, ...) \
     MOCK_FUNCTION_AUX(F, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
         inline,)
+#define MOCK_FUNCTION_DECLARE(F, n, ...) \
+    MOCK_FUNCTION_DECLARE_AUX(F, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
+        inline,)
+#define MOCK_FUNCTION_DEFINE(F, n, ...) \
+    MOCK_FUNCTION_DEFINE_AUX(F, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
+        inline,)

 #define MOCK_STATIC_METHOD(F, n, ...) \
     MOCK_FUNCTION_AUX(F, n, \
         MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
         MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
         static,)
+#define MOCK_STATIC_METHOD_DECLARE(F, n, ...) \
+    MOCK_FUNCTION_DECLARE_AUX(F, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
+        static,)
+#define MOCK_STATIC_METHOD_DEFINE(F, n, ...) \
+    MOCK_FUNCTION_DEFINE_AUX(F, n, \
+        MOCK_VARIADIC_ELEM_0(__VA_ARGS__), \
+        MOCK_VARIADIC_ELEM_1(__VA_ARGS__, F), \
+        static,)

 #define MOCK_STATIC_METHOD_TPL(F, n, ...) \
     MOCK_FUNCTION_AUX(F, n, \
